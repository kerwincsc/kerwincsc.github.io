BASH 小技巧
======================================================================

变量篇
------------------------------------------------------------

- 变量自增的实现方法

  #. i=`expr $i + 1`;
  #. let i+=1;
  #. ((i++));
  #. i=$[$i+1];
  #. i=$(( $i + 1 ));

- 使用 readonly 和 local 修饰变量

  readonly 只读; local 函数内变量


bg fg jobs
------------------------------------------------------------

#. :kbd:`Ctrl+z` 暂停命令到后台
#. `bg %num` 将指定序号的任务放在后台执行
#. `fg %num` 将指定序号的任务调到前台执行
#. `jobs` 列出当前任务控制表

如果你使用的是其它 shell, 比如 zsh, 有自带的 jobs 命令, 会使结果有所不同;

开启选项
------------------------------------------------------------

- **set -o nounset**

  在默认情况下, 遇到不存在的变量, 会忽略并继续执行, 而这往往不符合预期,
  加入该选项, 可以避免恶果扩大, 终止脚本的执行;

  注: 有些变量名的手误, 会让人崩溃的调试半天, 通过这个方式, 这类手误秒发现;

- **set -o errexit**

  在默认情况下, 遇到执行出错, 会跳过并继续执行, 而这往往不符合预期,
  加入该选项, 可以避免恶果扩大, 终止脚本的执行;

  注: 有些 Linux 命令, 例如 rm 的 -f 参数可以强制忽略错误, 此时脚本便无法捕捉到
  errexit, 这样的参数在脚本里是不推荐使用的;

以上两个选项, 都符合 fail fast 设计理念;

使用 **$()** 代替 ```(反单引号)``
------------------------------------------------------------

#. $() 能够支持内嵌;
#. $() 不用转义;
#. 有些字体, `(反单引号) 和 '(单引号) 很像, 容易把人搞晕;

使用 **[[]]** 代替 **[]**
------------------------------------------------------------

用单中括号: ``[ "${name}" \> "a" -o ${name} \< "m" ]``

用双中括号: ``[[ "${name}" > "a" -o ${name} < "m" ]]``

看出区别了么, **[[]]** 更符合人性编码:

  #. 避免转义问题;
  #. 有一些新功能(不限于以下):

     - **||**: 逻辑 or
     - **&&**: 逻辑 and
     - **<**: 字符串比较 ( 不需要转义 )
     - **==**: 通配符 (globbing) 字符串比较
     - **=~**: 正则表达式 (RegEx) 字符串比较 ::

	 t="abc123"
	 [[ "$t" == abc* ]]         # true globbing 比较
	 [[ "$t" == "abc*" ]]       # false 字面比较
	 [[ "$t" =~ [abc]+[123]+ ]] # true RegEx 比较
	 [[ "$t" =~ "abc*" ]]       # false 字面比较

       需要注意的是, 从 bash3.2 开始, 通配符和正则表达式都不能用引号包裹了,
       所以上面的例子, 加引号就是字面比较; ::

	 r="a b+"
	 [[ "a bbb" =~ $r ]]

       所以如果表达式里有空格, 必须存储到一个变量量, 再进行通配符与正则的比较;

echo 不是唯一的调试方法
------------------------------------------------------------

- 可以用 **-n** 对脚本进行语法检查 ::
    bash -n myscript.sh

- 可以用 **-v** 跟踪脚本里的每个命令的执行 ::
    bash -x myscript.sh

- 可以用 **-x** 跟踪脚本里的每个命令的执行, 并附加扩充信息;

也可以在脚本里添加: ::
  set -o verbose
  set -o xtrace
来永久指定输出调试信息;

       

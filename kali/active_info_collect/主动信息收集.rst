主动信息收集
======================================================================

- 直接与目标系统交互通信
- 无法避免留下访问的痕迹
- 使用受控的第三方电脑进行探测

  - 使用代理或已经被控制的主机
  - 做好被封杀的准备
  - 使用噪声迷惑目标, 淹没真实的探测流量

- 扫描

  - 发送不同的探测, 根据返回结果判断目标状态


发现
------------------------------------------------------------

- 识别活着的主机

  - 潜在的被攻击目标

- 输出一个 IP 地址列表
- 2, 3, 4层发现

二层发现
------------------------------------------------------------

- 优点: 扫描速度快, 可靠
- 缺点: 不可路由
- Arp协议

  路由器一般不会转发 arp 数据包, 即一般只能发现本网段的主机

  - 抓包

- 常用工具/命令

  - arping

    - arping 1.1.1.1 -c 1 # 发一个 arp ping 包
    - arping 1.1.1.1 -d   # -d 发现重复应答(发现重复IP) [#]_
    - arping -c 1 172.31.225.72 | grep "bytes from" | cut -d" " -f 5 | cut -d"(" -f 2 | cut -d")" -f 1

      只能ping一个目标地址, 不支持ping网段;
      可通过bash脚本实现;

  - nmap

    - nmap 1.1.1.1-254 -sn    # -sn Ping Scan - disable port scan 只能二层发现
    - nmap -iL iplist.txt -sn # -iL <inputfilename>: Input from list of hosts/networks

  - Netdiscover

    - 专用于二层发现
    - 可用于无线和交换网络环境
    - 主动和被动探测

    - 主动

      - netdiscover -i eth0 -r 1.1.1.0/24
      - netdiscover -I iplist.txt

    - 被动

      - netdiscover -p
      - 主动arp容易触发报警

  - Scapy 非常强大

    - 作为Python库进行调用
    - 也可作为单独的工具使用
    - 抓包, 分析, 创建, 修改, 注入网络流量

    - apt-get install python-gnuplot
    - ARP().display()
    - sr1() 发送组装好的数据包

三层发现
------------------------------------------------------------

- 优点

  - 可路由
  - 速度比较快

- 缺点

  - 速度比二层慢
  - 经常被边界防火墙过滤

- IP, icmp 协议

  - ping
    - ping 1.1.1.1 -c 2
    - ping **-R** www.sina.com / **traceroute** www.sina.com

- Scapy

  - OSI 多层堆叠手工生成 ICMP 包 --- IP/ICMP
  - ip = IP()
  - ip.dst = "1.1.1.1"
  - ping = ICMP()
  - a = sr1(ip/ping)
  - a.display()
  - ping 不存在的地址

    - a = sr1(ip/ping, timeout=1)
      
  - a = sr1(IP(dst="1.1.1.1")/ICMP(), timeout=1)

- 三层发现常用工具

  - fping
    
    可针对地址段发包

    - fping 1.1.1.1 -c 1                        # -c 发包数
    - fping -g 192.168.1.100 192.168.1.200 -c 1 # -g 地址段
    - fping -g 172.168.1.0/24 -c 1
    - fping -f iplist.txt

  - Hping 

    - 能够发送几乎任意 TCP/IP 包
    - 功能强大但每次只能扫描一个目标

    - hping3 1.1.1.1 -icmp -c 2
    - for addr in $(seq 1 254); do hping3 1.1.1.$addr --icmp -c 1 >> handle.txt & done

四层发现
------------------------------------------------------------

- 优点

  - 可路由且结果可靠
  - 不太可能被防火墙过滤
  - 甚至可以发现所有端口都被过滤的主机

- 缺点

  - 基于状态过滤的防火墙可能过滤扫描
  - 全端口扫描速度慢

- TCP

  - 未经请求的 ACK --- RST
  - SYN --- SYN/ACK , RST

  - ACK --- TCP Port --- RST

    直接构造 ACK 包发给主机, 如果主机存活, 则会返回标记位为 RST 包;

    因为未建立连接, 所以主机返回 RST (重置) 包;

    某些路由器会直接丢弃未建立连接的 ACK 包;

  - Scapy

    ::
       
       i = IP()
       t = TCP()
       r = (i/t)
       r[IP].dst = "172.31.225.72"
       r[TCP].dport = 435
       r[TCP].flags = 'A'
       a = sr1(t)
       a.display()

       a = sr1(IP(dst="1.1.1.1")/TCP(dport=80, flags='A'), timeout=1)


- UDP

  - ICMP 端口不可达 / 一去不复返

    目标 IP 不存在, 数据包一去不复返;

    目标 IP 存在, 且探测的端口开放, 数据包一去不复返;

    **目标 IP 存在, 且探测的端口不开放, 才会返回 icmp 不可达** , 故应该选择不常用的端口进行探测;

  - UDP --- UDP Port --- ICMP

  - Scapy

    ::

       i = IP()
       i.dst = "1.1.1.1"
       u = UDP()
       u.dport=33333
       r = (i/u)
       a = sr1(r, timeout=1, verbose=1)

- 四层发现常用工具

  - nmap 三层和四层扫描神器

    - nmap 1.1.1.1-254 -PU53 -sn
    - nmap 1.1.1.1-254 -PA80 -sn
    - nmap -iL iplist.txt -PA80 -sn

  - hping 

    - hping3 --udp 192.168.1.1 -c 1

      目标不可达, 状态为存活;


.. rubric:: Footnotes

.. [#] 如果重复的IP是网关地址, 则可能出现 arp 攻击

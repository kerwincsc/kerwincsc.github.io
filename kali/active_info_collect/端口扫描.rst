端口扫描
======================================================================

- 途径和目的

  - 端口对应网络服务及应用端程序
  - 服务端程序的漏洞通过端口攻入
  - 发现开放端口
  - 更具体的攻击面

UDP 端口扫描
------------------------------------------------------------

  - 假设 ICMP port-unreachable 响应代表端口关闭

    目标系统不响应 ICMP port-unreachable 时, 可能产生误判;

  - 完整的 UDP 应用层请求

     - 准确性高
     - 耗时巨大

  - Scapy UDP Scan

    - 端口关闭: ICMP port-unreachable
    - 端口开放: 没有回包
    - 了解每一种基于UDP的应用层包结构很有帮助
    - 误判

    - ``sr1(IP(dst="1.1.1.1")/UDP(dport=65432), timeout=5, verbose=0)``

  - Nmap

    - nmap -sU 1.1.1.1

      - 默认扫描 1000 个端口
      - ICMP host-unreachable

    - nmap -sU 1.1.1.1 -p 53
    - nmap -iL iplist.txt -p 1-200

TCP 端口扫描
------------------------------------------------------------

- 基于连接的协议
- 三次握手
- 所有的 TCP 扫描方式都是基于三次握手的变化来判断目标端口状态

隐蔽扫描 --- syn 半连接扫描
++++++++++++++++++++++++++++++++++++++++++++++++++

- 不建立完整连接
- 应用日志不记录行为 --- 较隐蔽

  仅应用层不进行记录, 网络层审计还是可以发现的;

- 实现过程
  
  - syn ---> syn/ack ---> rst

    发 syn 包, 但是不建立完整连接;

    扫描者向目标机发送 syn:

      - 无回应, 说明机器未存活;
      - 返回 syn/ack :

	说明指定端口开启;

	扫描者直接反回 rst 包 [#]_, 而不是回应建立连接的 ack 包,
	以中断连接的建立, 达到隐蔽扫描的目的;

      - 返回 rst/ack :

	说明指定端口在目标机器上未开启;

  - Scapy  ``sr1(IP("172.31.225.72")/TCP(flags='S', dport=33), timeout=5, verbose=0)``

    scapy 只发送了 syn 包到 172.31.225.72 的 33 端口上;
    如果机器存在且端口开启, 则如上所述回应 syn/ack 包,
    scapy 并不会自动回应此包, 此包在操作系统内核被发现,
    并确认不是自己发 syn 请求建立连接, 故回复 rst 取消连接;

  - Nmap

    - nmap -sS 1.1.1.1 -p 80,21,25,110,443
    - nmap -sS 1.1.1.1 -p 1-65535 --open  # 只显示探测端口为开的结果
    - nmap -ss 1.1.1.1 -p- --open         # -p后的 '-'代表1-65535的端口
    - nmap -sS -iL iplist.txt -p 80,21,22,23

  - hping3

    - hping3 1.1.1.1 --scan 80 -S
    - hping3 1.1.1.1 --scan 80,21,22 -S
    - hping3 1.1.1.1 --scan 0-65535 -S
    - hping3 -c 10 -S --spoof 172.31.225.172 -p ++1 172.31.225.50

      ::

	 -c 10      # 总共发 10 个 syn 包

	 -p ++1     # 每次发包端口号加1, 变相地扫描 1-10端口

	 --spoof    # 伪装源地址进行发包, 无法接收到回包

僵尸扫描
++++++++++++++++++++++++++++++++++++++++++++++++++

  现在还能做到僵尸扫描么?

  - 极度隐蔽
  - 使用条件较为苛刻
  - 可伪造源地址(必须1)
  - 选择僵尸机(必须2)

    - 闲置系统

      可以允许有 arp 等二层的包, 但是在发 IP 包的短时间内,
      不能有其它三层的包的活动;

      不要求是完全空闲的系统, 而是相对空闲;
      
    - 系统使用递增的 IPID [#]_

      - 0
      - 随机

  - 实现原理

    - 端口打开的情况

      #. 扫描者向僵尸机发送 **SYN/ACK** 

      #. 僵尸机返回 **RST**

	 因为未握手, 所以只能返回 **RST** , 此包中包含了 IPID, 设为 X;

      #. 扫描者 ``伪造源地址(僵尸机的地址)`` (可伪造源地址的需求) 向目标机器发送 **SYN** ;

      #. 目标机器返回 **SYN/ACK** (端口开放的情况) 给僵尸机(背锅侠)

      #. 由于僵尸机并未请求与目标机的连接,
	 故僵尸机会返回 **RST**, IPID 将为 X+1 (这就是需要使用递增 IPID 的机器的理由);

      #. 最后, 扫描者向僵尸机再次发送 **SYN/ACK** ,
	 僵尸机返回 **RST** , 此RST包中 IPID 为 X+2, 则确认指定端口开放;

    - 端口关闭的情况

      #. 扫描者向僵尸机发送 **SYN/ACK**

      #. 僵尸机返回 **RST**
	    
      #. 扫描者 ``伪造源地址(僵尸机的地址)`` (可伪造源地址的需求) 向目标机器发送 **SYN**

      #. 目标机器返回 **RST** (端口关闭的情况) 给僵尸机(背锅侠)

	 僵尸机不做任何处理, 即 IPID 不会增加1;

      #. 扫描者向僵尸机再次发送 **SYN/ACK**

	 僵尸机返回 **RST** , 此RST包中 IPID 为 X+1, 则确认指定端口未开放;

  - 实现过程

    僵尸扫描目前只有这两种工具支持;

    - scapy

      - 发现僵尸机

	使用 scapy 发送三个包, 并查看回包的 ipid 是否是连续的,
	如果是连续的 ipid, 则说明此机可作僵尸机;

	注意, 使用 scapy 的 sr1 方法时会接受一个回包, send 方法默认不接受回包,
	发送第二个包时, 可以考虑使用send;

    - nmap

      - 发现僵尸机 ``nmap -p445 192.168.1.133 --script=ipidseq.nse``

	::

	   Host script results:
	   |_ipidseq: Randomized    # 随机的 ipid, 不满足

	   Host script results:
	   |_ipidseq: Incremental!  # 递增的, 满足要求的僵尸机

      - 扫描目标 ``nmap 172.31.225.72 -sl 172.16.36.134 -Pn -p 0-100``

全连接扫描
++++++++++++++++++++++++++++++++++++++++++++++++++

- 建立完整的三次握手进行的扫描
- 不够隐蔽, 容易触动网络层的入侵检测
- 不常规使用, 只在特殊情况下使用

- scapy

  - syn 扫描不需要 raw packets
  - 内核认为 syn/ack 是非法包, 直接发 rst 终断连接
  - 全连接扫描在 scapy 实现起来比较困难

    需要禁用出站的 RST 包: ``iptables -A OUTPUT -p tcp --tcp-flags RST RST -d 172.31.225.72 -j DROP``

  - ``sr1(IP("172.31.225.72")/TCP(dport=80, flags='S'), timeout=5, verbose=0)``

- nmap

  - nmap -sT 1.1.1.1 -p 1-100

    -T TCP全连接的扫描方式

  - nmap -sT 1.1.1.1  # 默认扫描 1000 个常用端口, 不是前1000个端口;
  - nmap -sT -iL iplist.txt

- dmitry

  - 功能简单
  - 默认 150 个最常用的端口

  - dmitry -p 172.31.225.72           # -p 使用TCP全连接扫描
  - dmitry -p 172.31.225.72 -o output # -o 输出到文件

- nc

  - nc -nv -w 1 -z 172.31.225.72 1-100 # -w 超时时间 -z 零 I/O 模式, 常用来扫描

.. rubric:: Footnotes

.. [#] IP层的 Identification, IPID; 早期是递增的, 当前大多数系统已经随机产生 IPID
.. [#] 此 rst 包, 是系统内核自动返回的;

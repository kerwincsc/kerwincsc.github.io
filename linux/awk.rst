==================
 文本三神器之 AWK
==================

- 语法格式

  ``awk 'BEGIN{}pattern{commands}END{}' file_name``

  语法格式说明:

  .. code-block:: shell

     语法格式      解释
     BEGIN{}       正式处理数据之前执行
     pattern       匹配模式
     {commands}    处理命令, 可能多行
     END{}         处理完所有匹配数据后执行

工作模式
========

RegExp
------

按正则表达式匹配

例: 匹配 /etc/passwd 文件行中含有 root 字符串的所有行

``awk -F: '/root/{print $0}' /etc/passwd``

关系运算匹配
------------

按关系运算匹配 ``< > <= >= == != ~ !~``, 后四个运算符后可以跟字符串

其中 **~ !~** 为匹配正则表达式或不匹配正则表达式;

布尔运算符匹配: ``|| && !`` **与 或 非**

算术运算符
==========

.. code-block:: shell

   运算符        含义
   +             加
   -             减
   *             乘
   /             除
   %             模
   ^ 或 **       乘方
   ++x           在返回 x 变量之前, x 变量加 1
   x++           在返回 x 变量之后, x 变量加 1

条件语句
========

.. code-block:: shell

   if (条件表达式)
       动作1
   else if(条件表达式)
       动作2
   else
       动作3

循环语句
========

和 C 语言使用方法类似

- while

  .. code-block:: shell

     while(条件表达式):
         动作

- do while

  .. code-block:: shell

     do
         动作
     while(条件表达式)

- for

  .. code-block:: shell

     for(初始化计数器;计数器表达式;计数器变更)
         动作

数组
=====

在 awk 中使用数组时, 
	 
   
格式化输出之 printf
===================

格式说明符
----------

.. code-block:: shell
   :emphasize-lines: 2,3

   格式符      含义
   %s          打印字符串
   %d          打印十进制数
   %f          打印一个浮点数
   %x          打印十六进制数
   %o          打印八进制数
   %e          打印数字的科学计数法形式
   %c          打印单个字符的 ASCII 码
   -           左对齐
   +           右对齐
   #           显示 8 进制在前面加 0, 显示 16 进制在前面加 0x

内置变量对照表
==============

  .. code-block:: shell

     内置变量  含义
     $0        整行内容
     $1-$n     当前行的第 1-n 个字段
     NF        当前行的字段个数, 也就是有多个列 number of field
     NR        当前行的行号, 从 1 开始计数
     FNR       多文件处理时, 每个文件行号单独计数, 都是从 0 开始 File Number Row
     FS        输入字段分隔符. 不指定则默认以空格或 tab 键分割 Field Separator
     RS        输入行分隔符. 默认回车换行. Row S eparator            
     OFS       输出字段分隔符. 默认空格
     ORS       输出行分隔符. 默认为回车换行.
     FILENAME  处理文件的文件名
     ARGC      命令行参数个数
     ARGV      命令行参数数组
     
字符串函数对照表
================

+-----------------------+-----------------------------------+-----------------------------+
| 函数名                | 解释                              | 函数返回值                  |
+=======================+===================================+=============================+
| length(str)           | 计算字符串长度                    | 整数长度值                  |
+-----------------------+-----------------------------------+-----------------------------+
| index(str1, str2)     | 在 str1 中查找 str2 的位置        | 返回值为位置索引, 从 1 计数 |
+-----------------------+-----------------------------------+-----------------------------+
| tolower(str)          | 转换为小写                        | 转换后的小写字符串          |
+-----------------------+-----------------------------------+-----------------------------+
| toupper(str)          | 转换为大写                        | 转换后的大写字符串          |
+-----------------------+-----------------------------------+-----------------------------+
| substr(str, m, n)     | 从 str 的 m 个字符开始, 截取 n 位 | 截取后的子串                |
+-----------------------+-----------------------------------+-----------------------------+
| split(str, arr, fs)   | 按 fs 切割字符串, 结果保存 arr    | 切割后的子串的个数          |
+-----------------------+-----------------------------------+-----------------------------+
| match(str, RE)        | 在 str 中按照 RE 查找, 返回位置   | 返回索引位置                |
+-----------------------+-----------------------------------+-----------------------------+
| sub(RE, RepStr, str)  | 在 str 中搜索符合 RE 的字符串,    | 替换的个数                  |
|                       | 将其替换为 RepStr; 只替换第一个   |                             |
+-----------------------+-----------------------------------+-----------------------------+
| gsub(RE, RepStr, str) | 在 str 中搜索符合 RE 的字串,      | 替换的个数                  |
|                       | 将其替换为 RepStr; 替换所有       |                             |
+-----------------------+-----------------------------------+-----------------------------+


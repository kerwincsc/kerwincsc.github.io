================
 变量的高级用法
================

变量替换
========

+-------------------------------+-------------------------------------------------------------------+
|  语法                         |           说明                                                    |
+===============================+===================================================================+
|  ${变量名#匹配规则}           |  从变量 ``开头`` 进行匹配, 将最 **短** 的符合数据删除             |
+-------------------------------+-------------------------------------------------------------------+
|  ${变量名##匹配规则}          |  从变量 ``开头`` 进行匹配, 将最 **长** 的符合数据删除             |
+-------------------------------+-------------------------------------------------------------------+
|  ${变量名%匹配规则}           |从变量 ``尾部`` 进行匹配, 将最 **短** 的符合数据删除               |
+-------------------------------+-------------------------------------------------------------------+
|  ${变量名%匹配规则}           |  从变量 ``尾部`` 进行匹配, 将最 **短** 的符合数据删除             |
+-------------------------------+-------------------------------------------------------------------+
|  ${变量名/旧字符串/新字符串}  |  变量内容符合旧字符串规则, 则 ``第一个`` 旧字符串会被新字符串取代 |
+-------------------------------+-------------------------------------------------------------------+
|  ${变量名//旧字符串/新字符串} |  变量内容符合旧字符串规则, 则 ``全部`` 旧字符串会被新字符串取代   |
+-------------------------------+-------------------------------------------------------------------+

变量测试
========

+------------------+-----------------+------------------+------------------+
| 变量配置方式     | str 没有配置    | str 为空字符串   | str 已配置且非空 |
+==================+=================+==================+==================+
| var=${str-expr}  | var=expr        | var=             | var=$str         |
+------------------+-----------------+------------------+------------------+
| var=${str:-expr} | var=expr        | var=expr         | var=$str         |
+------------------+-----------------+------------------+------------------+
| var=${str+expr}  | var=            | var=expr         | var=expr         |
+------------------+-----------------+------------------+------------------+
| var=${str:+expr} | var=            | var=             | var=expr         |
+------------------+-----------------+------------------+------------------+
| var=${str=expr}  | var=expr        | var=             | var=$str         |
+------------------+-----------------+------------------+------------------+
| var=${str:=expr} | var=expr        | var=expr         | var=$str         |
+------------------+-----------------+------------------+------------------+

- ``-`` 和 ``:-``

  - **-** 当变量 str 已声明, 则 var 的值为 str, 否则, 就是 expr.

  - **:-** 当变量 str 已声明且非空, var 的值为 str, 否则, 是 expr.

- ``+`` 和 ``:+``

  - **+** 当变量 str 已声明, 则 var 的值为 expr, 否则, 就是 str.

  - **:+** 当变量 str 已声明且非空, 则 var 的值才是 expr, 否则, 就是 str.

- ``=`` 和 ``:=``

  - **=** 当变量 str 已声明, 则 var 的值为 str, 否则, 就是 expr.

  - **:=** 变量 str 已声明且非空, 则 var 的值为 str, 否则, 是 expr.

字符串处理
==========

计算字符串长度
--------------

+-----------------------+-------------------------------+
| 语法                  |     说明                      |
+-----------------------+-------------------------------+
| ${#string}            | string 是变量名, 不是变量本身 |
+-----------------------+-------------------------------+
| expr length "$string" | string 有空格, 则必须加双引号 |
+-----------------------+-------------------------------+

两种方式中, ``$`` 语法中的 string, 只能是变量, 不可以是字符串本身.

获取子串中的字符在字符串中的索引位置
------------------------------------

``expr index $string $substring``

返回的索引是 substring 中最先在 string 找到的字符的位置.

计算子串长度
------------

``expr match $string substr``

从头开始匹配

抽取子串
--------

+---------------------------------------+-------------------------------------+
| 语法                                  | 说明                                |
+=======================================+=====================================+
| ${string:position}                    | 从 string 中的 position 开始        |
+---------------------------------------+-------------------------------------+
| ${string:position:length}             | 从 position 开始, 匹配长度为 length |
+---------------------------------------+-------------------------------------+
| ${string: -position}                  | 从右边开始匹配, 注意有空格          |
+---------------------------------------+-------------------------------------+
| ${string:(position)}                  | 从左边开始匹配                      |
+---------------------------------------+-------------------------------------+
| expr substr $string $position $length | 从 position 开始, 匹配长度为 length |
+---------------------------------------+-------------------------------------+

**$** 语法提取字串和 expr substr 提取字串在处理位置上有所不同.

``$`` 将第一个字符认为是位置 0, ``expr substr`` 则认为是 1.


有类型变量
==========

declare 和 typeset 命令, 两者等价.

declare 命令参数表

+------+------------------------------------+
| 参数 | 含义                               |
+======+====================================+
| -r   | 设为只读                           |
+------+------------------------------------+
| -i   | 设为整数                           |
+------+------------------------------------+
| -a   | 设为数组                           |
+------+------------------------------------+
| -f   | 显示些脚本前定义过的所有函数及内容 |
+------+------------------------------------+
| -F   | 仅显示此脚本前定义过的函数名       |
+------+------------------------------------+
| -x   | 声明为环境变量                     |
+------+------------------------------------+

声明为 ``-``, 取消声明为 ``+``, 但是 **+x**, 不会取消只读变量的只读性.
**+a** 也不会删除数组.

声明为环境变量, 可以在脚本中直接使用.

操作数组
========

对于数组变量 array, 可进行如下操作:

- 取指定位置的值 ``echo ${array[index]}``

- 返回数组所有元素 ``echo ${array[@]}``

- 返回数组长度 ``echo ${#array[@]}``

- 返回数组中某个元素的长度 ``echo ${#array[index]}``

- 给数组某个下标赋值 ``array[0]="lily"``  ``array[20]="hanmeimei"``

- 删除元素

  - 删除单个数组元素 ``unset array[2]``

  - 清空整个数组 ``unset array``

- 分片访问 ``${array[@]:1:4}``

  显示数组下标索引从 1 开始的 4 个元素

- 内容替换 ``${array[@]/an/AN}``

  将 array 中所有的 an 替换为 AN

- 数组遍历

  .. code-block:: shell

     for v in ${array[@]}
     do
         echo $v
     done


数学运算
========

- expr ``expr $num1 operator $num2``

  只能进行整数运算;

  
- ``$(($num1 operator $num2))``

  只能在其中进行加, 减, 乘, 除, 取余, 其它操作不允许;

- bc

  内建的运算器, 支持浮点数运算;

  内建变量 scale 可以设置, 默认为 0; 设置 scale 调整精确度

  大部分发行版都有, 最小化安装可以没有, 需要安装

expr 操作符对照表
-----------------

+--------------+---------------------------------------------+
| 操作符       | 含义                                        |
+==============+=============================================+
| num1 | num2  | num1 不为空且非 0, 返回 num1; 否则返回 num2 |
+--------------+---------------------------------------------+
| num1 & num2  | num1 不为空且非 0, 返回 num1; 否则返回 0    |
+--------------+---------------------------------------------+
| num1 < num2  | num1 小于 num2, 返回 1; 否则返回 0          |
+--------------+---------------------------------------------+
| num1 <= num2 | num1 小于等于 num2, 返回 1; 否则返回 0      |
+--------------+---------------------------------------------+
| num1 != num2 | num1 不等于 num2, 返回 1; 否则返回 0        |
+--------------+---------------------------------------------+
| num1 > num2  | num1 大于 num2, 返回 1; 否则返回 0          |
+--------------+---------------------------------------------+
| num1 >= num2 | num1 大于等于 num2, 返回 1; 否则返回 0      |
+--------------+---------------------------------------------+
| num1 + num2  | 求和                                        |
+--------------+---------------------------------------------+
| num1 - num2  | 求差                                        |
+--------------+---------------------------------------------+
| num1 * num2  | 求积                                        |
+--------------+---------------------------------------------+
| num1 / num2  | 求商                                        |
+--------------+---------------------------------------------+
| num1 % num2  | 求余                                        |
+--------------+---------------------------------------------+

需要对 ``| & < <= > >= *`` 进行转义, 一般出现语法错误时, 考虑对操作符进行转义;

.. code-block:: shell

   expr $num1 \| $num2
   expr $num1 \& $num2
   expr $num1 \> $num2


- bc 操作符对照表

  +-------------+------+
  | 操作符      | 含义 |
  +=============+======+
  | num1 + num2 | 求和 |
  +-------------+------+
  | num1 - num2 | 求差 |
  +-------------+------+
  | num1 * num2 | 求积 |
  +-------------+------+
  | num1 / num2 | 求商 |
  +-------------+------+
  | num1 % num2 | 求余 |
  +-------------+------+
  | num1 ^ num2 | 指数 |
  +-------------+------+

=====================
 01 文本三神器之 sed
=====================

选项
====

.. code-block:: shell

   -n        静默模式, 只打印模式匹配的行
   -e        直接在命令行进行 sed 编辑, 默认选项, 可指定多个.
   -f        编辑动作保存在文件, 指定文件执行
   -r        支持扩展正则表达式
   -i        直接修改文件内容

匹配 (pattern)
==============

- 基于行号匹配
  
- 基于 pattern 匹配

- 混合匹配

  匹配行在前, 如果没有匹配, 一行都不打;

  匹配行在后, 如果没有匹配, 将一直打印到结尾;

.. code-block:: shell
   :name: sed-pattern
   :linenos:
   :emphasize-lines: 4,5

   10command                     匹配到第 10 行
   10,20command                  匹配从第 10 行开始, 到第 20 行结束
   10,+5command                  匹配从第 10行开始, 到后 5 行结束
   /pattern1/command             匹配到 pattern1 的行*
   /pattern1/,/pattern2/command  匹配到 pattern1 的行开始, 到匹配 patern2 的行结束*
   10,/patern1/command           匹配从第 10 行开始, 到匹配到 pattern1 的行结束
   /pattern1/,10command          匹配到 pattern1 的行开始, 到第 10 行匹配结束

编辑命令
========

+------+--------------+---------------------------------------+
| 类别 | 编辑命令     | 含义                                  |
+======+==============+=======================================+
| 查询 | p            | 打印                                  |
|      +--------------+---------------------------------------+
|      | =            | 显示行号                              |
+------+--------------+---------------------------------------+
|      | a            | 行后追加                              |
|      +--------------+---------------------------------------+
|      | i            | 行前追加                              |
| 增加 +--------------+---------------------------------------+
|      | r            | 外部文件读入, 行后追加                |
|      +--------------+---------------------------------------+
|      | w            | 匹配行写入外部文件                    |
+------+--------------+---------------------------------------+
| 删除 | d            | 删除                                  |
+------+--------------+---------------------------------------+
|      | s/old/new    | 将行内第一个 old 替换为 new           |
|      +--------------+---------------------------------------+
| 修改 | s/old/new/2g | 将行内从第 2 个 old 开始替换为 new    |
|      +--------------+---------------------------------------+
|      | s/old/new/ig | 将行内 old 全部替换为 new, 忽略大小写 |
+------+--------------+---------------------------------------+

编辑命令之间, 使用 **;** 分隔

反向引用
========

- ``&`` 和 ``\1`` 引用模式匹配到整个串

  **sed "s/1..e/&r/g" file**    在 file 中搜寻以 1 开头, 然后跟两个任意字符,
  以 e 结尾的字符串, 然后在其尾部添加 r.

  **sed "s/\1(1..e\)/\1r/g" file** 和上面一样, 不过 **\1** 更加灵活,
  使用 -r 选项, 就不需要对 () 进行转义了;

在脚本中使用变量
================

.. code-block:: shell

   $ cat example.sh
   old=test
   new=TEST

   sed -i "s/$old/$new/g" test.txt     # 最佳实践
   sed -i 's/'$old'/'$new'/g' test.txt # 不推荐使用
   sed -i 's/$old/$new/g' test.txt     # 不会奏效   

sed 在脚本中使用引用变量时, 最好将单引号换成双引号, 变量才能正确被替换.

高级用法
========

hold space     pattern space

h H            g G

`参考`_



.. _参考: https://www.cnblogs.com/fhefh/archive/2011/11/22/2259097.html
